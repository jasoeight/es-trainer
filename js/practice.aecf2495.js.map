{"version":3,"sources":["webpack:///./src/graphql/Practice.gql","webpack:///./src/views/Practice.vue?dc48","webpack:///./src/components/practice/Form.vue?ddf2","webpack:///src/components/practice/Form.vue","webpack:///./src/components/practice/Form.vue?8376","webpack:///./src/components/practice/Form.vue","webpack:///src/views/Practice.vue","webpack:///./src/views/Practice.vue?a99a","webpack:///./src/views/Practice.vue","webpack:///./src/graphql/Lessons.gql"],"names":["doc","kind","definitions","operation","name","value","variableDefinitions","variable","type","directives","selectionSet","selections","alias","arguments","loc","start","end","source","body","locationOffset","line","column","collectFragmentReferences","node","refs","add","forEach","selection","def","definitionRefs","findOperation","i","length","element","oneQuery","operationName","newDoc","hasOwnProperty","opRefs","Set","allRefs","newRefs","size","prevRefs","refName","has","childRefs","childRef","op","push","module","exports","render","_vm","this","_h","$createElement","_c","_self","attrs","alignCenter","justify-center","on","practice","startPractice","query","__webpack_require__","variables","filter","practiceFilter","scopedSlots","_u","key","fn","ref","ref_result","result","loading","data","error","xs12","width","color","indeterminate","language","items","_e","staticRenderFns","Formvue_type_template_id_3d362edd_render","staticClass","multiple","clearable","item-value","item-text","lessons","label","hint","persistent-hint","model","callback","$$v","$set","expression","types","limits","large","click","_v","Formvue_type_template_id_3d362edd_staticRenderFns","Formvue_type_script_lang_js_","limit","text","methods","$emit","Object","assign","practice_Formvue_type_script_lang_js_","component","componentNormalizer","options","__file","Form","Practicevue_type_script_lang_js_","components","PracticeForm","PracticeCards","e","then","bind","showForm","views_Practicevue_type_script_lang_js_","Practice_component","__webpack_exports__"],"mappings":"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","file":"js/practice.aecf2495.js","sourcesContent":["\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"Practice\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"filter\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ItemsFilter\"}}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":{\"kind\":\"Name\",\"value\":\"practice\"},\"name\":{\"kind\":\"Name\",\"value\":\"randomItems\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"filter\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"filter\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"lesson\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"de\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"es\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"info\"},\"arguments\":[],\"directives\":[]}]}}]}}],\"loc\":{\"start\":0,\"end\":143}};\n    doc.loc.source = {\"body\":\"query Practice ($filter: ItemsFilter!) {\\n    practice: randomItems(filter: $filter) {\\n      id\\n      lesson\\n      de\\n      es\\n      info\\n  }\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \r\n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \r\n\n    // Collect any fragment/type references from a node, adding them to the refs Set\n    function collectFragmentReferences(node, refs) {\n      if (node.kind === \"FragmentSpread\") {\n        refs.add(node.name.value);\n      } else if (node.kind === \"VariableDefinition\") {\n        var type = node.type;\n        if (type.kind === \"NamedType\") {\n          refs.add(type.name.value);\n        }\n      }\n\n      if (node.selectionSet) {\n        node.selectionSet.selections.forEach(function(selection) {\n          collectFragmentReferences(selection, refs);\n        });\n      }\n\n      if (node.variableDefinitions) {\n        node.variableDefinitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n\n      if (node.definitions) {\n        node.definitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n    }\n\n    var definitionRefs = {};\n    (function extractReferences() {\n      doc.definitions.forEach(function(def) {\n        if (def.name) {\n          var refs = new Set();\n          collectFragmentReferences(def, refs);\n          definitionRefs[def.name.value] = refs;\n        }\n      });\n    })();\n\n    function findOperation(doc, name) {\n      for (var i = 0; i < doc.definitions.length; i++) {\n        var element = doc.definitions[i];\n        if (element.name && element.name.value == name) {\n          return element;\n        }\n      }\n    }\n\n    function oneQuery(doc, operationName) {\n      // Copy the DocumentNode, but clear out the definitions\n      var newDoc = {\n        kind: doc.kind,\n        definitions: [findOperation(doc, operationName)]\n      };\n      if (doc.hasOwnProperty(\"loc\")) {\n        newDoc.loc = doc.loc;\n      }\n\n      // Now, for the operation we're running, find any fragments referenced by\n      // it or the fragments it references\n      var opRefs = definitionRefs[operationName] || new Set();\n      var allRefs = new Set();\n      var newRefs = new Set(opRefs);\n      while (newRefs.size > 0) {\n        var prevRefs = newRefs;\n        newRefs = new Set();\n\n        prevRefs.forEach(function(refName) {\n          if (!allRefs.has(refName)) {\n            allRefs.add(refName);\n            var childRefs = definitionRefs[refName] || new Set();\n            childRefs.forEach(function(childRef) {\n              newRefs.add(childRef);\n            });\n          }\n        });\n      }\n\n      allRefs.forEach(function(refName) {\n        var op = findOperation(doc, refName);\n        if (op) {\n          newDoc.definitions.push(op);\n        }\n      });\n\n      return newDoc;\n    }\n\n    module.exports = doc;\n    \n        module.exports[\"Practice\"] = oneQuery(doc, \"Practice\");\n        \r\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('layout-main',{attrs:{\"alignCenter\":\"\",\"justify-center\":\"\"}},[(_vm.showForm)?_c('practice-form',{on:{\"practice\":_vm.startPractice}}):_c('apollo-query',{attrs:{\"query\":require('@/graphql/Practice.gql'),\"variables\":{ filter: _vm.practiceFilter }},scopedSlots:_vm._u([{key:\"default\",fn:function(ref){\nvar ref_result = ref.result;\nvar loading = ref_result.loading;\nvar error = ref_result.error;\nvar data = ref_result.data;\nreturn [_c('v-flex',{attrs:{\"xs12\":\"\"}},[(loading)?_c('v-progress-circular',{attrs:{\"size\":70,\"width\":7,\"color\":\"purple\",\"indeterminate\":\"\"}}):(data && data.practice)?_c('practice-cards',{attrs:{\"language\":_vm.language,\"items\":data.practice}}):_vm._e()],1)]}}])})],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('v-card',[_c('v-card-text',[_c('v-form',[_c('apollo-query',{attrs:{\"query\":require('@/graphql/Lessons.gql')},scopedSlots:_vm._u([{key:\"default\",fn:function(ref){\nvar data = ref.result.data;\nreturn [_c('v-select',{staticClass:\"mb-4\",attrs:{\"multiple\":\"\",\"clearable\":\"\",\"item-value\":\"name\",\"item-text\":\"name\",\"items\":data ? data.lessons : [],\"label\":\"Lektion\",\"hint\":\"Für alle Lektion leer lassen\",\"persistent-hint\":\"\"},model:{value:(_vm.model.lessons),callback:function ($$v) {_vm.$set(_vm.model, \"lessons\", $$v)},expression:\"model.lessons\"}})]}}])}),_c('v-select',{staticClass:\"mb-4\",attrs:{\"items\":_vm.types,\"label\":\"Typ\",\"clearable\":\"\",\"hint\":\"Für alle Typen leer lassen\",\"persistent-hint\":\"\"},model:{value:(_vm.model.type),callback:function ($$v) {_vm.$set(_vm.model, \"type\", $$v)},expression:\"model.type\"}}),_c('v-select',{staticClass:\"mb-4\",attrs:{\"items\":_vm.language,\"label\":\"Sprache\",\"hint\":\"Lege die Ausgangssprache fest\",\"persistent-hint\":\"\"},model:{value:(_vm.model.language),callback:function ($$v) {_vm.$set(_vm.model, \"language\", $$v)},expression:\"model.language\"}}),_c('v-select',{staticClass:\"mb-4\",attrs:{\"items\":_vm.limits,\"label\":\"Limit\"},model:{value:(_vm.model.limit),callback:function ($$v) {_vm.$set(_vm.model, \"limit\", $$v)},expression:\"model.limit\"}}),_c('v-btn',{attrs:{\"color\":\"primary\",\"large\":\"\"},on:{\"click\":_vm.practice}},[_vm._v(\"Übung starten\")])],1)],1)],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n    <v-card>\r\n        <v-card-text>\r\n            <v-form>\r\n                <apollo-query :query=\"require('@/graphql/Lessons.gql')\">\r\n                    <template slot-scope=\"{ result: { data } }\">\r\n                        <v-select\r\n                            v-model=\"model.lessons\"\r\n                            multiple\r\n                            clearable\r\n                            item-value=\"name\"\r\n                            item-text=\"name\"\r\n                            :items=\"data ? data.lessons : []\"\r\n                            label=\"Lektion\"\r\n                            hint=\"Für alle Lektion leer lassen\"\r\n                            persistent-hint\r\n                            class=\"mb-4\"\r\n                        />\r\n                    </template>\r\n                </apollo-query>\r\n                <v-select\r\n                    v-model=\"model.type\"\r\n                    :items=\"types\"\r\n                    label=\"Typ\"\r\n                    clearable\r\n                    hint=\"Für alle Typen leer lassen\"\r\n                    persistent-hint\r\n                    class=\"mb-4\"\r\n                />\r\n                <v-select\r\n                    v-model=\"model.language\"\r\n                    :items=\"language\"\r\n                    label=\"Sprache\"\r\n                    hint=\"Lege die Ausgangssprache fest\"\r\n                    persistent-hint\r\n                    class=\"mb-4\"\r\n                />\r\n                <v-select\r\n                    v-model=\"model.limit\"\r\n                    :items=\"limits\"\r\n                    label=\"Limit\"\r\n                    class=\"mb-4\"\r\n                />\r\n                <v-btn\r\n                    color=\"primary\"\r\n                    large\r\n                    @click=\"practice\"\r\n                >Übung starten</v-btn>\r\n            </v-form>\r\n        </v-card-text>\r\n    </v-card>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    data() {\r\n        return {\r\n            model: {\r\n                lessons: [],\r\n                type: '',\r\n                language: 'de',\r\n                limit: -1\r\n            },\r\n            types: [\r\n                { text: 'Vokabel', value: 'word' },\r\n                { text: 'Zahl', value: 'number' },\r\n                { text: 'Text', value: 'text' }\r\n            ],\r\n            language: [\r\n                { text: 'DE -> ES', value: 'de' },\r\n                { text: 'ES -> DE', value: 'es' }\r\n            ],\r\n            limits: [\r\n                { text: 'Alle', value: -1 },\r\n                { text: '10', value: 10 },\r\n                { text: '25', value: 25 },\r\n                { text: '50', value: 50 },\r\n                { text: '75', value: 75 },\r\n                { text: '100', value: 100 }\r\n            ]\r\n        };\r\n    },\r\n    methods: {\r\n        practice() {\r\n            this.$emit('practice', Object.assign({}, this.model));\r\n        }\r\n    }\r\n};\r\n</script>\r\n","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Form.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Form.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Form.vue?vue&type=template&id=3d362edd&\"\nimport script from \"./Form.vue?vue&type=script&lang=js&\"\nexport * from \"./Form.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\ncomponent.options.__file = \"Form.vue\"\nexport default component.exports","<template>\n    <layout-main alignCenter justify-center>\n        <practice-form\n            v-if=\"showForm\"\n            @practice=\"startPractice\"\n        />\n        <apollo-query\n            v-else\n            :query=\"require('@/graphql/Practice.gql')\"\n            :variables=\"{ filter: practiceFilter }\"\n        >\n            <template slot-scope=\"{ result: { loading, error, data } }\">\n                <v-flex xs12>\n                    <v-progress-circular\n                        v-if=\"loading\"\n                        :size=\"70\"\n                        :width=\"7\"\n                        color=\"purple\"\n                        indeterminate\n                    />\n                    <practice-cards\n                        v-else-if=\"data && data.practice\"\n                        :language=\"language\"\n                        :items=\"data.practice\"\n                    />\n                </v-flex>\n            </template>\n        </apollo-query>\n    </layout-main>\n</template>\n\n<script>\nimport PracticeForm from '@/components/practice/Form.vue';\nexport default {\n    components: {\n        PracticeForm,\n        PracticeCards: () => import('@/components/practice/Cards.vue')\n    },\n    data() {\n        return {\n            showForm: true,\n            practiceFilter: {},\n            language: ''\n        };\n    },\n    methods: {\n        startPractice(data) {\n            this.language = data.language;\n            delete data.language;\n            this.practiceFilter = data;\n            this.showForm = false;\n        }\n    }\n};\n</script>\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Practice.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Practice.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Practice.vue?vue&type=template&id=2457f821&\"\nimport script from \"./Practice.vue?vue&type=script&lang=js&\"\nexport * from \"./Practice.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\ncomponent.options.__file = \"Practice.vue\"\nexport default component.exports","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"Lessons\"},\"variableDefinitions\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":{\"kind\":\"Name\",\"value\":\"lessons\"},\"name\":{\"kind\":\"Name\",\"value\":\"getLessons\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"directives\":[]}]}}]}}],\"loc\":{\"start\":0,\"end\":63}};\n    doc.loc.source = {\"body\":\"query Lessons {\\n    lessons: getLessons {\\n        name\\n    }\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \r\n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \r\n\n    // Collect any fragment/type references from a node, adding them to the refs Set\n    function collectFragmentReferences(node, refs) {\n      if (node.kind === \"FragmentSpread\") {\n        refs.add(node.name.value);\n      } else if (node.kind === \"VariableDefinition\") {\n        var type = node.type;\n        if (type.kind === \"NamedType\") {\n          refs.add(type.name.value);\n        }\n      }\n\n      if (node.selectionSet) {\n        node.selectionSet.selections.forEach(function(selection) {\n          collectFragmentReferences(selection, refs);\n        });\n      }\n\n      if (node.variableDefinitions) {\n        node.variableDefinitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n\n      if (node.definitions) {\n        node.definitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n    }\n\n    var definitionRefs = {};\n    (function extractReferences() {\n      doc.definitions.forEach(function(def) {\n        if (def.name) {\n          var refs = new Set();\n          collectFragmentReferences(def, refs);\n          definitionRefs[def.name.value] = refs;\n        }\n      });\n    })();\n\n    function findOperation(doc, name) {\n      for (var i = 0; i < doc.definitions.length; i++) {\n        var element = doc.definitions[i];\n        if (element.name && element.name.value == name) {\n          return element;\n        }\n      }\n    }\n\n    function oneQuery(doc, operationName) {\n      // Copy the DocumentNode, but clear out the definitions\n      var newDoc = {\n        kind: doc.kind,\n        definitions: [findOperation(doc, operationName)]\n      };\n      if (doc.hasOwnProperty(\"loc\")) {\n        newDoc.loc = doc.loc;\n      }\n\n      // Now, for the operation we're running, find any fragments referenced by\n      // it or the fragments it references\n      var opRefs = definitionRefs[operationName] || new Set();\n      var allRefs = new Set();\n      var newRefs = new Set(opRefs);\n      while (newRefs.size > 0) {\n        var prevRefs = newRefs;\n        newRefs = new Set();\n\n        prevRefs.forEach(function(refName) {\n          if (!allRefs.has(refName)) {\n            allRefs.add(refName);\n            var childRefs = definitionRefs[refName] || new Set();\n            childRefs.forEach(function(childRef) {\n              newRefs.add(childRef);\n            });\n          }\n        });\n      }\n\n      allRefs.forEach(function(refName) {\n        var op = findOperation(doc, refName);\n        if (op) {\n          newDoc.definitions.push(op);\n        }\n      });\n\n      return newDoc;\n    }\n\n    module.exports = doc;\n    \n        module.exports[\"Lessons\"] = oneQuery(doc, \"Lessons\");\n        \r\n"],"sourceRoot":""}